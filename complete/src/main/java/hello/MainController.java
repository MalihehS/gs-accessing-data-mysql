package hello;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.Lists;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/libraryall") // This means URL's start with /demo (after Application path)
public class MainController {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());//Log4j2
    @Autowired // This means to get the bean called userRepository
    private UserRepository userRepository; // Which is auto-generated by Spring, we will use it to handle the data

    @GetMapping(path = "/hello")
    public @ResponseBody
    String hello() {
        logger.debug("row 30, Debug message");
        logger.info("row 31,Info message");
        logger.warn("row 32,Warn message");
        logger.error("row 33,Error message");
        return "Done";
    }

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser(@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        logger.info("name "+name+" and email "+ email);
        String newName = name.toLowerCase();
        logger.error("kommer denna med i log-filen app_log.log ?");

        Iterable<User> all = userRepository.findAll();
        List<User> myList = Lists.newArrayList(all);
        boolean present = myList.stream().filter(c -> c.getName().equals(newName)).findFirst().isPresent();
        //boolean pre = myList.stream().filter(p -> p.getEmail().equals(email)).findFirst().isPresent();

        User user = new User("empty");
        String result = "empty";
        if (present) {

            // user = new User("user " + newName + " does exist");
            result = "Can not add " + newName + "because it is exist";

        } else {
            if (email.isEmpty()) {
                result = "will not add user " + newName + " because email is empty";
            } else {
                User newPerson = new User(name, email);
                userRepository.save(newPerson);
                result = "Done";
            }
        }
        return result;

    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        return userRepository.findAll();  // This returns a JSON or XML with the users
    }

    @GetMapping(path = "/del") // skicka in ett namn
    public @ResponseBody
    boolean deletaOneUser(@RequestParam String name) {
        String newName = name.toLowerCase();

        Iterable<User> all = userRepository.findAll();
        List<User> myList = Lists.newArrayList(all);
        boolean present = myList.stream().filter(c -> c.getName().equals(newName)).findFirst().isPresent();

        User user = new User("empty");
        if (present) {
            user = myList.stream().filter(c -> c.getName().equals(newName)).findFirst().get();
            userRepository.delete(user);

        } else {
            user = new User("user " + newName + " does not exist");
        }
        return false;
    }

    // https://docs.spring.io/spring-data/data-commons/docs/1.6.1.RELEASE/reference/html/repositories.html
    @GetMapping(path = "/some")
    public @ResponseBody
    User getSpecificUser(@RequestParam String name) {
        String newName = name.toLowerCase();

        Iterable<User> all = userRepository.findAll();
        List<User> myList = Lists.newArrayList(all);
        boolean present = myList.stream().filter(c -> c.getName().equals(newName)).findFirst().isPresent();

        User user = new User("empty");
        if (present) {
            user = myList.stream().filter(c -> c.getName().equals(newName)).findFirst().get();
        } else {
            user = new User("user " + newName + " does not exist");
        }

        return user;
    }

}
